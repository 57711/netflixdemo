{"version":3,"sources":["api/fetchData.js","action/index.js","components/MyList.js","components/Recommandation.js","components/Header.js","App.js","serviceWorker.js","Reducer/index.js","Reducer/myListReducer.js","Reducer/recommendReducer.js","index.js"],"names":["axios","create","baseURL","fetchData","list","dispatch","a","server","get","response","type","toUpperCase","payload","data","MyList","state","onHover","this","props","Array","isArray","map","item","className","key","id","onMouseOver","setState","onMouseOut","alt","src","img","event","stopPropagation","title","style","height","onClick","removeMyList","renderList","React","Component","connect","console","log","mylist","getState","delete","post","recommendation","addHandler","addMyList","recommend","Header","App","Boolean","window","location","hostname","match","combineReducers","action","filter","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.517136c8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL:'http://localhost:3001'\r\n});","import server from '../api/fetchData';\r\n\r\nexport const fetchData = (list) => {\r\n    return async dispatch => {\r\n        const response = await server.get(`/${list}`);\r\n        //console.log(response);\r\n        dispatch({\r\n            type: `FETCH_${list.toUpperCase()}`,\r\n            payload: response.data\r\n        })        \r\n    }\r\n\r\n}\r\n\r\nexport const addMyList = (item) => {\r\n    return async dispatch => {\r\n        const response = await server.post(\"mylist\",item);\r\n        console.log(response);\r\n        dispatch({\r\n            type: \"ADD_ITEM\",\r\n            payload: response.data\r\n        })\r\n    }\r\n}\r\nexport const removeMyList = (item) => {\r\n    return async (dispatch,getState) => {\r\n        await server.delete(`/mylist/${item.id}`);\r\n        try{\r\n            const response = await server.post(\"/recommendations\",item);\r\n\r\n            dispatch({\r\n                type: \"REMOVE_ITEM\",\r\n                payload: response.data\r\n            })\r\n        }catch(err){\r\n            dispatch({\r\n                type: \"REMOVE_ITEM_MYLIST\",\r\n                payload: item\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData, removeMyList } from '../action';\r\n\r\nclass MyList extends React.Component {\r\n    state = {onHover: null};\r\n    componentDidMount(){\r\n        this.props.fetchData(\"mylist\");\r\n    }\r\n    renderList(){\r\n        if(Array.isArray(this.props.data) === true){\r\n            return this.props.data.map(item => {\r\n                return (\r\n                    <div className=\"ui three wide column\" \r\n                    key={item.id} \r\n                    onMouseOver={()=>this.setState({onHover: item.id})}\r\n                    onMouseOut={()=>this.setState({onHover: null})}>\r\n                        <img className=\"ui medium image\" alt=\"\" src={item.img} />\r\n                        <span onMouseOut={(event)=> event.stopPropagation()}>{item.title}</span>\r\n                        <div style={{height:30+'px'}} \r\n                        onMouseOut={(event)=> event.stopPropagation()}>\r\n                            {this.state.onHover===item.id?<button className=\"tiny ui button\" onClick={()=>this.props.removeMyList(item)}>Remove</button>:''}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            });\r\n        }else{\r\n            return <div>loading...</div>\r\n        }\r\n                \r\n    }\r\n\r\n    render(){\r\n        // console.log(this.props.data);\r\n        // console.log(Array.isArray(this.props.data));\r\n        return(\r\n            <div className=\"ui container\">\r\n                <h3 className=\"first\">My List</h3>\r\n                <div className=\"ui grid\">\r\n                    {this.renderList()}\r\n                </div>                               \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {data:state.mylist}\r\n}\r\nexport default connect(mapStateToProps,{fetchData,removeMyList})(MyList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData, addMyList } from '../action';\r\n\r\n\r\nclass recommendation extends React.Component {\r\n    state = {onHover: null};\r\n    componentDidMount(){\r\n        this.props.fetchData(\"recommendations\");\r\n    }\r\n    addHandler = () => {\r\n\r\n    }\r\n    renderList(){\r\n        if(Array.isArray(this.props.data) === true){\r\n            return this.props.data.map(item => {\r\n                return (\r\n                    <div className=\"ui three wide column\" \r\n                    key={item.id} \r\n                    onMouseOver={()=>this.setState({onHover: item.id})}\r\n                    onMouseOut={()=>this.setState({onHover: null})}>\r\n                        <img className=\"ui medium image\" alt=\"\" src={item.img} />\r\n                        <span onMouseOut={(event)=> event.stopPropagation()}>{item.title}</span>\r\n                        <div style={{height:30+'px'}} \r\n                        onMouseOut={(event)=> event.stopPropagation()}>\r\n                            {this.state.onHover===item.id?<button className=\"tiny ui button\" onClick={()=>this.props.addMyList(item)}>Add</button>:''}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            });\r\n        }else{\r\n            return <div>loading...</div>\r\n        }\r\n                \r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"ui container\">\r\n                <h3 className=\"first\">Recommendation</h3>\r\n                <div className=\"ui grid\">\r\n                    {this.renderList()}\r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return {data: state.recommend}\r\n}\r\nexport default connect(mapStateToProps,{fetchData,addMyList})(recommendation);","import React from 'react';\r\n// import logo from './download.png';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"ui secondary pointing menu\">\r\n            <div className=\"ui container\">                \r\n                <img src=\"../../public/download.jpg\" className=\"item\" alt=\"NETFLIX\" />  \r\n            </div>\r\n        </div>              \r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport MyList from './components/MyList';\nimport Recommand from './components/Recommandation';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MyList />\n      <Recommand />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport myListReducer from './myListReducer';\r\nimport recommendRecuder from './recommendReducer';\r\n\r\nexport default combineReducers({\r\n    mylist: myListReducer,\r\n    recommend: recommendRecuder\r\n})","export default (state={}, action) => {\r\n    switch(action.type){\r\n        case \"FETCH_MYLIST\":\r\n            return action.payload;\r\n        case \"ADD_ITEM\":\r\n            return [...state, action.payload];\r\n        case \"REMOVE_ITEM\":\r\n        case \"REMOVE_ITEM_MYLIST\":\r\n            return state.filter(item=> item.id !== action.payload.id);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","export default (state={},action) => {\r\n    switch(action.type){\r\n        case \"FETCH_RECOMMENDATIONS\":\r\n            return action.payload;\r\n        case \"REMOVE_ITEM\":\r\n            return [...state, action.payload];\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './Reducer';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n<Provider store = {store}>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}